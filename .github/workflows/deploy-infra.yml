name: Deploy Infrastructure to GCP

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install Poetry
        run: pip install poetry
      - name: Install dependencies
        run: poetry install --no-root
      - name: Lint with flake8
        run: |
          poetry add --dev flake8
          poetry run flake8 .

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install Poetry
        run: pip install poetry
      - name: Install dependencies
        run: poetry install
      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$(pwd)/app" >> $GITHUB_ENV
      - name: Authenticate with GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - name: Pull model from DVC
        run: |
          poetry run dvc pull app/model/red_wine_model.pkl
      - name: Run tests with pytest
        run: poetry run pytest

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build Docker image
        run: docker build -f Dockerfile.api -t wine-quality-prediction-api:latest .
    
  terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6  
      - name: Authenticate with GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }} 
      - name: Write credentials to a temporary file
        run: |
          echo '${{ secrets.GCP_SA_KEY }}' > credentials.json
      - name: Initialize Terraform
        run: terraform -chdir=terraform init
      - name: Plan Terraform
        run: |
          export TF_VAR_credentials_file="$(pwd)/credentials.json"
          terraform -chdir=terraform plan
      - name: Import existing firewall rule
        run: |
          export TF_VAR_credentials_file="$(pwd)/credentials.json"
          terraform -chdir=terraform import google_compute_firewall.allow-http projects/wine-quality-prediction-450400/global/firewalls/allow-http
      - name: Apply Terraform
        run: |
          export TF_VAR_credentials_file="$(pwd)/credentials.json"
          terraform -chdir=terraform apply -auto-approve
      - name: Clean up temporary credentials file
        run: rm -f credentials.json